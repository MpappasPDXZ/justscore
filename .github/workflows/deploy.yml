name: Build and Deploy JustScore

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging

env:
  REGISTRY: justscoreacr.azurecr.io
  IMAGE_NAME: justscore
  RESOURCE_GROUP: justscore-rg
  APP_SERVICE_NAME: justscoreca
  CONTAINER_APP: true

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
      with:
        driver: docker
        
    - name: Log in to Azure
      id: azure-login
      continue-on-error: true
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
        
    - name: Check Azure login status
      if: steps.azure-login.outcome != 'success'
      run: |
        echo "::error::Azure login failed. Please ensure AZURE_CREDENTIALS secret is properly configured."
        echo "AZURE_CREDENTIALS should be a JSON object with clientId, clientSecret, tenantId, and subscriptionId."
        echo "You can create the appropriate credentials by running:"
        echo "az ad sp create-for-rbac --name \"JustScoreGitHubActions\" --role Contributor --scopes /subscriptions/<subscription-id>/resourceGroups/justscore-rg --sdk-auth"
        exit 1
        
    - name: Log in to Azure Container Registry
      id: acr-login
      continue-on-error: true
      uses: azure/docker-login@v1
      with:
        login-server: ${{ env.REGISTRY }}
        username: ${{ secrets.ACR_USERNAME }}
        password: ${{ secrets.ACR_PASSWORD }}
        
    - name: Check ACR login status
      if: steps.acr-login.outcome != 'success'
      run: |
        echo "::error::ACR login failed. Please ensure ACR_USERNAME and ACR_PASSWORD secrets are configured."
        echo "You can get your ACR credentials by running: az acr credential show --name justscoreacr"
        exit 1
        
    - name: Build and push image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest,${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        platforms: linux/amd64
        
    - name: Check if App Service exists
      id: check-app
      run: |
        if [ "${{ env.CONTAINER_APP }}" == "true" ]; then
          # Check if the Container App exists
          EXISTS=$(az containerapp show --name ${{ env.APP_SERVICE_NAME }} --resource-group ${{ env.RESOURCE_GROUP }} --query id --output tsv 2>/dev/null || echo "")
        else
          # Check if the App Service exists
          EXISTS=$(az webapp show --name ${{ env.APP_SERVICE_NAME }} --resource-group ${{ env.RESOURCE_GROUP }} --query id --output tsv 2>/dev/null || echo "")
        fi
        
        if [ -z "$EXISTS" ]; then
          echo "App ${{ env.APP_SERVICE_NAME }} does not exist."
          echo "app_exists=false" >> $GITHUB_OUTPUT
        else
          echo "App ${{ env.APP_SERVICE_NAME }} exists."
          echo "app_exists=true" >> $GITHUB_OUTPUT
        fi
        
    - name: Deploy to Azure
      if: steps.check-app.outputs.app_exists == 'true'
      run: |
        echo "Deploying ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} to ${{ env.APP_SERVICE_NAME }}"
        
        if [ "${{ env.CONTAINER_APP }}" == "true" ]; then
          # Deploy to Container App
          az containerapp update --name ${{ env.APP_SERVICE_NAME }} \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --image ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} \
            --registry-server ${{ env.REGISTRY }}
        else
          # Deploy to Web App using azure/webapps-deploy action
          echo "Using Web App deployment"
        fi
    
    - name: Deploy to Azure App Service
      if: steps.check-app.outputs.app_exists == 'true' && env.CONTAINER_APP != 'true'
      uses: azure/webapps-deploy@v2
      with:
        app-name: ${{ env.APP_SERVICE_NAME }}
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
    
    - name: Skip deployment - App Service not found
      if: steps.check-app.outputs.app_exists != 'true'
      run: |
        echo "Skipping deployment because App ${{ env.APP_SERVICE_NAME }} does not exist."
        
        if [ "${{ env.CONTAINER_APP }}" == "true" ]; then
          echo "To create the Container App, run:"
          echo "az containerapp create --resource-group ${{ env.RESOURCE_GROUP }} --name ${{ env.APP_SERVICE_NAME }} --image ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
        else
          echo "To create the App Service, run:"
          echo "az webapp create --resource-group ${{ env.RESOURCE_GROUP }} --plan YOUR_PLAN_NAME --name ${{ env.APP_SERVICE_NAME }} --deployment-container-image-name ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
        fi
        
    - name: Azure logout
      run: |
        az logout
        
  notify:
    needs: build-and-deploy
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Send notification
      uses: act10ns/slack@v1
      with:
        status: ${{ job.status }}
        steps: ${{ toJson(steps) }}
        channel: '#deployments'
      if: always() && false  # Disabled until Slack webhook is configured 