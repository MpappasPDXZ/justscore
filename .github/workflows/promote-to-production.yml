name: Promote to Production

on:
  workflow_dispatch:
    inputs:
      image_tag:
        description: 'Container image tag to deploy (default: latest)'
        required: false
        default: 'latest'
        type: string

env:
  REGISTRY: justscoreacr.azurecr.io
  IMAGE_NAME: justscore
  RESOURCE_GROUP: justscore-rg
  APP_SERVICE_NAME: justscoreca
  CONTAINER_APP: true

jobs:
  promote-to-production:
    runs-on: ubuntu-latest
    
    steps:
    - name: Log in to Azure
      id: azure-login
      continue-on-error: true
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
        
    - name: Check Azure login status
      if: steps.azure-login.outcome != 'success'
      run: |
        echo "::error::Azure login failed. Please ensure AZURE_CREDENTIALS secret is properly configured."
        echo "AZURE_CREDENTIALS should be a JSON object with clientId, clientSecret, tenantId, and subscriptionId."
        echo "You can create the appropriate credentials by running:"
        echo "az ad sp create-for-rbac --name \"JustScoreGitHubActions\" --role Contributor --scopes /subscriptions/<subscription-id>/resourceGroups/justscore-rg --sdk-auth"
        exit 1
        
    - name: Set image tag
      run: |
        echo "Using image tag: ${{ github.event.inputs.image_tag || 'latest' }}"
        echo "IMAGE_TAG=${{ github.event.inputs.image_tag || 'latest' }}" >> $GITHUB_ENV
        
    - name: Check if App Service exists
      id: check-app
      run: |
        if [ "${{ env.CONTAINER_APP }}" == "true" ]; then
          # Check if the Container App exists
          EXISTS=$(az containerapp show --name ${{ env.APP_SERVICE_NAME }} --resource-group ${{ env.RESOURCE_GROUP }} --query id --output tsv 2>/dev/null || echo "")
        else
          # Check if the App Service exists
          EXISTS=$(az webapp show --name ${{ env.APP_SERVICE_NAME }} --resource-group ${{ env.RESOURCE_GROUP }} --query id --output tsv 2>/dev/null || echo "")
        fi
        
        if [ -z "$EXISTS" ]; then
          echo "App ${{ env.APP_SERVICE_NAME }} does not exist."
          echo "app_exists=false" >> $GITHUB_OUTPUT
        else
          echo "App ${{ env.APP_SERVICE_NAME }} exists."
          echo "app_exists=true" >> $GITHUB_OUTPUT
        fi
        
    - name: Deploy using Azure CLI
      if: steps.check-app.outputs.app_exists == 'true'
      run: |
        echo "Deploying ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} to ${{ env.APP_SERVICE_NAME }}"
        
        if [ "${{ env.CONTAINER_APP }}" == "true" ]; then
          # Deploy to Container App
          az containerapp update --name ${{ env.APP_SERVICE_NAME }} \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --image ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} \
            --registry-server ${{ env.REGISTRY }}
        else
          # Deploy to Web App
          az webapp config container set --name ${{ env.APP_SERVICE_NAME }} \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --docker-custom-image-name ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} \
            --docker-registry-server-url https://${{ env.REGISTRY }}
        fi
          
    - name: Skip deployment - App Service not found
      if: steps.check-app.outputs.app_exists != 'true'
      run: |
        echo "Skipping deployment because App ${{ env.APP_SERVICE_NAME }} does not exist."
        
        if [ "${{ env.CONTAINER_APP }}" == "true" ]; then
          echo "To create the Container App, run:"
          echo "az containerapp create --resource-group ${{ env.RESOURCE_GROUP }} --name ${{ env.APP_SERVICE_NAME }} --image ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}"
        else
          echo "To create the App Service, run:"
          echo "az webapp create --resource-group ${{ env.RESOURCE_GROUP }} --plan YOUR_PLAN_NAME --name ${{ env.APP_SERVICE_NAME }} --deployment-container-image-name ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}"
        fi
        
    - name: Azure logout
      run: |
        az logout
        
    - name: Post deployment status
      run: |
        echo "Deployment of ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} to ${{ env.APP_SERVICE_NAME }} completed."